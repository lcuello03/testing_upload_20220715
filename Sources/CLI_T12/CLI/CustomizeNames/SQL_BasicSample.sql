CREATE TABLE TABLE0, 
NO FALLBACK, 
NO BEFORE JOURNAL, 
NO AFTER JOURNAL
(
    C1 INTEGER NOT NULL
)

CREATE TABLE TABLE1
(
    C1 INTEGER NOT NULL
)
PRIMARY INDEX(C1)

CREATE TABLE TABLE2
(
    C1 INTEGER NOT NULL
)
UNIQUE PRIMARY INDEX(C1)

--Test errors
CREATE PROCEDURE PROC.ERROR1()
BEGIN
  CALL DBC.SYSEXECSQL('DROP TABLE TABLE1');
  CALL DBC.SYSEXECSQL('DROP TABLE TABLE2');
  CALL DBC.SYSEXECSQL('DROP TABLE TABLE3');
END;

--Test errors
CREATE PROCEDURE PROC.ERROR2()
BEGIN
  CALL DBC.SYSEXECSQL('DROP TABLE TABLE1');
END;

--Test Function expression
REPLACE PROCEDURE SNOWCONVERT.DYNAMIC_RESULT_SETS()
BEGIN
IF  (COALESCE (is_Override, 'N') <> 'Y' ) THEN   -----> The input for this delegate.
SET v_count_lm_run=0;
ELSE
SET v_count_loaded_pos=3;
END IF;
END;

CREATE JOIN INDEX DataBaseName1.JoinName ,NO FALLBACK ,CHECKSUM = DEFAULT AS 
SELECT col1 ,col2 , col3 FROM atable 
PRIMARY INDEX ( col1 );

REPLACE MACRO new_emp1oyee (
number   INTEGER, 
name     VARCHAR(12), 
dept     INTEGER    DEFAULT 900, 
position VARCHAR(12),
sex      CHARACTER, 
dob      DATE       FORMAT 'MMMbDDbYYYY', 
edlev    BYTEINT )  AS
(INSERT INTO employee (empno,name,deptno,jobtitle,sex,dob,edlev)
VALUES (:number, :name, :dept, :position, :sex, :dob, :edlev);
SELECT * 
FROM employee 
WHERE empno = :number; );

REPLACE FUNCTION calc1 (func CHARACTER(1), A INTEGER, B INTEGER)
RETURNS INTEGER
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
SQL SECURITY DEFINER
COLLATION INVOKER INLINE TYPE 1
RETURN
CASE
WHEN func = 'A' THEN A + B
WHEN func = 'S' THEN A - B
WHEN func = 'M' THEN A * B
ELSE A / B END;

CREATE FUNCTION test.myudf (a PERIOD (TIME))
RETURNS PERIOD (TIME)
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
SPECIFIC test.myudf
CALLED ON NULL INPUT
SQL SECURITY DEFINER
COLLATION INVOKER INLINE TYPE 1
RETURN
PRIOR(END(a));

REPLACE VIEW ZAI_P_Source.JAVA$CLASS$MD5$TABLE AS LOCKING ROW
FOR ACCESS
SELECT
MAX(CASE
        WHEN (CNT_CF=1) THEN Object3
        ELSE NULL
    END) OVER(PARTITION BY CIF_C
                ORDER BY IND_NP) AS Object1,
MAX(CASE
        WHEN (CNT_CF=1) THEN Object3
        ELSE NULL
    END) OVER(PARTITION BY CIF_C
                ORDER BY IND_P) AS Object2 ,
CASE
    WHEN RSDT_ADRS_I = 'N' THEN Object1
    WHEN CUST_TYP_C = 'P' THEN Object2
    ELSE NULL
END AS Object3
FROM SomeTable;

REPLACE VIEW PUBLIC.NEWVIEW AS
LOCKING ROW FOR ACCESS
SELECT
COLUMN1 as COLUMN2,
COLUMN2 as COLUMN1,
COLUMN3
From TABLE1
where COLUMN1=DATE;