-- <copyright file="PERIOD_UDF.sql" company="Mobilize.Net">
--        Copyright (C) Mobilize.Net info@mobilize.net - All Rights Reserved
-- 
--        This file is part of the Mobilize Frameworks, which is
--        proprietary and confidential.
-- 
--        NOTICE:  All information contained herein is, and remains
--        the property of Mobilize.Net Corporation.
--        The intellectual and technical concepts contained herein are
--        proprietary to Mobilize.Net Corporation and may be covered
--        by U.S. Patents, and are protected by trade secret or copyright law.
--        Dissemination of this information or reproduction of this material
--        is strictly forbidden unless prior written permission is obtained
--        from Mobilize.Net Corporation.
-- </copyright>

-- =============================================
-- DESCRIPTION: EMULATES THE BEHAVIOR OF THE END FUNCTION
-- EQUIVALENT: TERADATA'S END FUNCTION
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_END_UDF(PERIOD_VAL VARCHAR(22))
RETURNS TIMESTAMP
IMMUTABLE
AS
$$
 CAST(SUBSTR(PERIOD_VAL,POSITION('*',PERIOD_VAL)+1) AS TIMESTAMP)
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE BEHAVIOR OF THE BEGIN FUNCTION
-- EQUIVALENT: TERADATA'S BEGIN FUNCTION
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_BEGIN_UDF(PERIOD_VAL VARCHAR(22))
RETURNS TIMESTAMP
IMMUTABLE
AS
$$
 CAST(SUBSTR(PERIOD_VAL,1, POSITION('*',PERIOD_VAL)-1) AS TIMESTAMP)
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE BEHAVIOR OF THE LAST FUNCTION
-- EQUIVALENT: TERADATA'S LAST FUNCTION
-- =============================================
CREATE OR REPLACE FUNCTION PERIOD_LAST_UDF(PERIOD_VAL VARCHAR(22))
RETURNS TIMESTAMP
IMMUTABLE
AS
$$
 CASE 
    WHEN PERIOD_VAL REGEXP '(.)*\\:(.)*' THEN DATEADD(millisecond, -1, CAST(SUBSTR(PERIOD_VAL,POSITION('*',PERIOD_VAL)+1) AS TIMESTAMP))
    ELSE CAST(SUBSTR(PERIOD_VAL,POSITION('*',PERIOD_VAL)+1) AS TIMESTAMP)
 END
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE BEHAVIOR OF THE LDIFF FUNCTION
-- EQUIVALENT: TERADATA'S LDIFF FUNCTION
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_LDIFF_UDF(PERIOD_1 VARCHAR(50), PERIOD_2 VARCHAR(50))
RETURNS VARCHAR
IMMUTABLE
AS
$$
 CASE WHEN PUBLIC.PERIOD_OVERLAPS_UDF(PERIOD_2, PERIOD_1) = 'TRUE' 
            AND PUBLIC.PERIOD_BEGIN_UDF(PERIOD_1) < PUBLIC.PERIOD_BEGIN_UDF(PERIOD_2) 
       THEN
        SUBSTR(PERIOD_1,1, POSITION('*',PERIOD_1)-1) || '*' || SUBSTR(PERIOD_2,1, POSITION('*',PERIOD_2)-1)
       ELSE
         NULL
       END     
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE BEHAVIOR OF THE RDIFF FUNCTION
-- EQUIVALENT: TERADATA'S RDIFF FUNCTION
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_RDIFF_UDF(PERIOD_1 VARCHAR(50), PERIOD_2 VARCHAR(50))
RETURNS VARCHAR
IMMUTABLE
AS
$$
CASE WHEN PUBLIC.PERIOD_OVERLAPS_UDF(PERIOD_2, PERIOD_1) = 'TRUE' 
            AND PUBLIC.PERIOD_END_UDF(PERIOD_1) > PUBLIC.PERIOD_END_UDF(PERIOD_2) 
       THEN
        SUBSTR(PERIOD_2,POSITION('*',PERIOD_2)+1) || '*' || SUBSTR(PERIOD_1,POSITION('*',PERIOD_1)+1)
       ELSE
         NULL
       END
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE BEHAVIOR OF THE OVERLAPS FUNCTION
-- EQUIVALENT: TERADATA'S OVERLAPS FUNCTION
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_OVERLAPS_UDF(PERIOD_1 VARCHAR(22), PERIOD_2 VARCHAR(22))
RETURNS BOOLEAN
IMMUTABLE
AS
$$
 CASE WHEN 
    (PUBLIC.PERIOD_END_UDF(PERIOD_1) >= PUBLIC.PERIOD_BEGIN_UDF(PERIOD_2) AND
     PUBLIC.PERIOD_BEGIN_UDF(PERIOD_1)  < PUBLIC.PERIOD_END_UDF(PERIOD_2))
    OR
    (PUBLIC.PERIOD_BEGIN_UDF(PERIOD_1) >= PUBLIC.PERIOD_BEGIN_UDF(PERIOD_2)AND
     PUBLIC.PERIOD_BEGIN_UDF(PERIOD_1) < PUBLIC.PERIOD_END_UDF(PERIOD_2)
    )
THEN
    TRUE
ELSE
    FALSE
END 
$$;

-- =============================================
-- DESCRIPTION: GENERATES A VARCHAR REPRESENTATION OF THE TWO BOUNDS OF A PERIOD(TIMESTAMP) VALUE, USED TO EMULATE THE TERADATA PERIOD VALUE CONSTRUCTOR FUNCTION.
-- THIS VERSION GENERATES THE RESULTING STRING USING THE DEFAULT FORMAT SNOWFLAKE HAS FOR REPRESENTING TIMESTAMP VALUES, IF YOU REQUIRE LESS OR MORE PRECISION
-- EITHER CHANGE THE SESSION PARAMETER TIMESTAMP_OUTPUT_FORMAT OR USE THE THREE PARAMETERS VERSION OF THIS UDF 
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 TIMESTAMP_NTZ, D2 TIMESTAMP_NTZ)
RETURNS STRING
IMMUTABLE
AS
$$
TO_VARCHAR(D1) || '*' || TO_VARCHAR(D2)
$$;

-- =============================================
-- DESCRIPTION: GENERATES A VARCHAR REPRESENTATION OF THE TWO BOUNDS OF A PERIOD(DATE) VALUE, USED TO EMULATE THE TERADATA PERIOD VALUE CONSTRUCTOR FUNCTION.
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 DATE, D2 DATE)
RETURNS STRING
IMMUTABLE
AS
$$
TO_VARCHAR(D1) || '*' || TO_VARCHAR(D2)
$$;

-- =============================================
-- Description: Generates a varchar representation of the two bounds of a period(time) value, used to emulate the Teradata Period Value Constructor Function.
-- This version generates the resulting string using the default format Snowflake has for representing timestamp values, if you require less or more precision
-- either change the session parameter TIME_OUTPUT_FORMAT or use the three parameters version of this UDF 
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 TIME, D2 TIME)
RETURNS STRING
IMMUTABLE
AS
$$
TO_VARCHAR(D1) || '*' || TO_VARCHAR(D2)
$$;

-- =============================================
-- DESCRIPTION: GENERATES A VARCHAR REPRESENTATION OF THE TWO BOUNDS OF A PERIOD(TIMESTAMP) VALUE, THIS VERSION ALLOWS TO DEFINE HOW MANY PRECISION DIGITS ARE
-- DESIRED IN THE RESULT (UP TO 9, HOWEVER, PLEASE KEEP IN MIND TERADATA MAXIMUM PRECISION FOR TIMESTAMPS IS 6)
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 TIMESTAMP_NTZ, D2 TIMESTAMP_NTZ, PRECISIONDIGITS INT)
RETURNS STRING
IMMUTABLE
AS
$$
CASE WHEN PRECISIONDIGITS <= 0 THEN
        TO_VARCHAR(D1, 'YYYY-MM-DD HH24:MI:SS') || '*' || TO_VARCHAR(D2, 'YYYY-MM-DD HH24:MI:SS')
     WHEN PRECISIONDIGITS > 9 THEN
        TO_VARCHAR(D1, 'YYYY-MM-DD HH24:MI:SS.FF9') || '*' || TO_VARCHAR(D2, 'YYYY-MM-DD HH24:MI:SS.FF9')
     ELSE
        TO_VARCHAR(D1, 'YYYY-MM-DD HH24:MI:SS.FF' || PRECISIONDIGITS) || '*' || TO_VARCHAR(D2, 'YYYY-MM-DD HH24:MI:SS.FF' || PRECISIONDIGITS)
END
$$;

-- =============================================
-- DESCRIPTION: GENERATES A VARCHAR REPRESENTATION OF THE TWO BOUNDS OF A PERIOD(TIME) VALUE, THIS VERSION ALLOWS TO DEFINE HOW MANY PRECISION DIGITS ARE
-- DESIRED IN THE RESULT (UP TO 9, HOWEVER, PLEASE KEEP IN MIND TERADATA MAXIMUM PRECISION FOR TIME IS 6)
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 TIME, D2 TIME, PRECISIONDIGITS INT)
RETURNS STRING
IMMUTABLE
AS
$$
CASE WHEN PRECISIONDIGITS <= 0 THEN
        TO_VARCHAR(D1, 'HH24:MI:SS') || '*' || TO_VARCHAR(D2, 'HH24:MI:SS')
     WHEN PRECISIONDIGITS > 9 THEN
        TO_VARCHAR(D1, 'HH24:MI:SS.FF9') || '*' || TO_VARCHAR(D2, 'HH24:MI:SS.FF9')
     ELSE
        TO_VARCHAR(D1, 'HH24:MI:SS.FF' || PRECISIONDIGITS) || '*' || TO_VARCHAR(D2, 'HH24:MI:SS.FF' || PRECISIONDIGITS)
END
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE TERADATA PERIOD VALUE CONSTRUCTOR FUNCTION OVERLOAD WITH A SINGLE TIMESTAMP PARAMETER, IN THE ORIGINAL BEHAVIOR TERADATA ADDS ONE
-- TO THE SMALLEST TIME PART OF THE TIMESTAMP (UP TO MICROSECONDS AT PRECISION 6) BUT SNOWFLAKE TIMESTAMPS DEFAULT TO PRECISION 9 (NANOSECONDS), A MICROSECOND IS
-- ADDED TO MATCH TERADATA'S MAXIMUM PRECISION FOR TIMESTAMPS SO RESULTS MIGHT DIFFER AT LOWER PRECISIONS
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 TIMESTAMP_NTZ)
RETURNS STRING
IMMUTABLE
AS
$$
TO_VARCHAR(D1) || '*' || TO_VARCHAR(DATEADD(MICROSECOND, 1, D1))
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE TERADATA PERIOD VALUE CONSTRUCTOR FUNCTION OVERLOAD WITH A SINGLE DATE PARAMETER
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 DATE)
RETURNS STRING
IMMUTABLE
AS
$$
TO_VARCHAR(D1) || '*' || TO_VARCHAR(DATEADD(DAY, 1, D1))
$$;

-- =============================================
-- DESCRIPTION: EMULATES THE TERADATA PERIOD VALUE CONSTRUCTOR FUNCTION OVERLOAD WITH A SINGLE TIME PARAMETER, IN THE ORIGINAL BEHAVIOR TERADATA ADDS ONE
-- TO THE SMALLEST TIME PART OF THE TIME TYPE (UP TO MICROSECONDS AT PRECISION 6) BUT SNOWFLAKE TIME TYPE DEFAULTS TO PRECISION 9 (NANOSECONDS), A MICROSECOND IS
-- ADDED TO MATCH TERADATA'S MAXIMUM PRECISION FOR TIME SO RESULTS MIGHT DIFFER AT LOWER PRECISIONS
-- =============================================
CREATE OR REPLACE FUNCTION PUBLIC.PERIOD_UDF(D1 TIME)
RETURNS STRING
IMMUTABLE
AS
$$
TO_VARCHAR(D1) || '*' || TO_VARCHAR(DATEADD(MICROSECOND, 1, D1))
$$;